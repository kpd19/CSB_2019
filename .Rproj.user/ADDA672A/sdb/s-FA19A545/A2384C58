{
    "collab_server" : "",
    "contents" : "###############################\n#                             #\n#       FUNCTION FILE         #\n#         KP Dixon            #\n#         CSB 2019            #\n#                             #\n###############################\n\nlibrary(tidyverse)\nlibrary(zoo)\n\n\n# function that capitalizes the first letter in a string\nfirstup <- function(x) {\n  substr(x, 1, 1) <- toupper(substr(x, 1, 1))\n  x\n}\n\n########################### \n#\n# FUNCTIONS + TESTS\n#\n########################### \n\n# function to plot daily snow depth or other metric for a given date range\n# works great\nplot_over_time <- function(data, timeA = 1990, timeB = 2000, var = \"SNWD\", metric = \"Snow Depth\"){\n  SD_plot <- data %>% filter(year >= timeA) %>% filter(year <= timeB) %>% ggplot() + \n    aes_string(x = \"DATE\", y = var) + geom_line(color = \"darkblue\") +\n    labs(title = paste0(metric, \" - \", sitename),\n         y = metric,\n         x = \"Date\") + theme_bw(base_size = 15)\n  \n  print(SD_plot)\n}\n\n\n\n# function to find the temperature for the hottest day of the year \n# works but isn't malliable for variable\nTMAX_over_time <- function(data, timeA = 1990, timeB = 2000){\n  SD_plot <- data %>% filter(year >=timeA) %>% filter(year <= timeB) %>%  \n    group_by(year) %>% summarize(max_var = max(TMAX, na.rm=TRUE)) %>% \n    ggplot() + aes(x = year, y = max_var) + geom_line(color = \"red\") +\n    labs(title = paste0(\"Hottest Temp of the Year - \", sitename),\n         y = \"Temperature (F)\",\n         x = \"Date\") + theme_bw(base_size = 15)\n  \n  print(SD_plot)\n}\n\n\n\n# function to find the temperature for the coldest day of the year \n# works but isn't malliable for variable\nTMIN_over_time <- function(data, timeA = 1990, timeB = 2000){\n  SD_plot <- data %>% filter(year >= timeA) %>% filter(year <= timeB) %>%\n    group_by(year) %>% summarize(min_var = min(TMIN, na.rm=TRUE)) %>% \n    ggplot() + aes(x = year, y = min_var) + geom_line(color = \"darkblue\") +\n    labs(title = paste0(\"Coldest temperature of the year (F) - \", sitename),\n         y = \"Temperature (F)\",\n         x = \"Date\") + theme_bw(base_size = 15)\n  \n  print(SD_plot)\n}\n\n\n\n# function to find the Extremes for the year \n# works but isn't malliable for variable\nEXTREMES_over_time <- function(data, timeA = 1990, timeB = 2000){\n  SD_plot <- dat %>% filter(year >=timeA) %>% filter(year <= timeB) %>%\n    group_by(year) %>% summarize(max_var = max(TMAX, na.rm=TRUE), min_var = min(TMIN, na.rm=TRUE)) %>% \n    ggplot() + aes(x = year) + geom_line(aes(y = max_var), color = \"red\") + geom_line(aes(y=min_var), color=\"darkblue\") +\n    labs(title = paste0(\"Extreme Temps of the Year - \", sitename),\n         y = \"Temperature (F)\",\n         x = \"Date\") + theme_bw(base_size = 15)\n  \n  print(SD_plot)\n}\n\n\n# function to find the last day with no snow\nlast_no_snow <- function(dataset, timeA = 1990, timeB = 2000){\n  SD_plot <- dataset %>% filter(year >= timeA) %>% filter(year <= timeB) %>% group_by(year) %>% filter(!is.na(SNWD)) %>% filter(SNWD==0) %>% \n    select(DATE) %>% top_n(1) %>%  mutate(early = as.numeric(format(DATE, format=\"%j\"))) %>% \n    ggplot() + aes(x=year, y= early) %>% geom_point(color=\"blue\") +\n    labs(title = paste0(\"Day of first accumulated snow - \", sitename),\n         y = \"Julian Day\",\n         x = \"Year\") + theme_bw(base_size = 15)\n  \n  print(SD_plot)\n}\n\n\n# function to find the first day with no snow\n# errors with it being in early january\nearliest_no_snow <- function(dataset, timeA = 1990, timeB = 2010){\n  SD_plot <- dataset %>% filter(year >= timeA) %>%  filter(year <= timeB) %>% group_by(year) %>% filter(!is.na(SNWD)) %>% filter(SNWD==0) %>% \n    select(DATE) %>% top_n(1, desc(DATE)) %>%  mutate(early = as.numeric(format(DATE, format=\"%j\"))) %>% \n    ggplot() + aes(x=year, y= early) %>% geom_point(color=\"blue\") +\n    labs(title = paste0(\"Extreme Temps of the Year - \", sitename),\n         y = \"Julian Day\",\n         x = \"Year\") + theme_bw(base_size = 15)\n  \n  print(SD_plot)\n}\n\n\n# function to find cumulative snowfall \ncumulative_snow <- function(dataset, timeA = 1990, timeB = 2010){\n  snow_dat <- dataset %>% filter(year >= timeA) %>% filter(year <= timeB) %>% group_by(year) %>% summarize(cumulative = sum(SNOW, na.rm=TRUE))\n  SD_plot <- snow_dat %>% ggplot() + aes(x=year, y= cumulative) %>% geom_point(color=\"blue\") +\n    labs(title = paste0(\"Extreme Temps of the Year - \", sitename),\n         y = \"Cumulative Inches of Snow\",\n         x = \"Year\") + theme_bw(base_size = 15)\n  \n  print(SD_plot)\n}\n\n# function to find the number of degree days relevant to DFTM\nfind_degree_days <- function(dataset, timeA=1991, threshold = 42, target = 400){\n  first_date <- dataset %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>% \n    mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format=\"%j\"))) %>% drop_na(d_days) %>% \n    mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>target) %>% top_n(1, desc(j_date)) %>% select(j_date)\n  return(as.numeric(first_date))\n}\n\n\n# for all the years in the dataset find the julian date for degree days above a certain threshold\ndegree_days_time <- function(dataset, timeA = 1985, timeB = 2010, threshold=42, target=440, site = \"Site Here\", PLOT = TRUE){\n  \n  years <- seq(timeA, timeB, 1)\n  values <- array(NA, dim=c(length(years),2))\n  values[,1] <- years\n  \n  for(i in 1:length(years)){\n    values[i,2] <- find_degree_days(dataset = dataset, timeA = years[i], threshold = threshold, target = target)\n  }\n  values <- data.frame(values)\n  colnames(values) <- c(\"year\", \"julian_days\")\n  mean_j_date <- mean(values$julian_days, na.rm=TRUE)\n  var_j_date <- var(values$julian_days, na.rm=TRUE)\n  \n  if (PLOT == TRUE){\n    degree_day_plot <- values %>% ggplot() + aes(x = year, y = julian_days) + geom_point(color=\"blue\") +\n      geom_hline(yintercept = mean_j_date, color = \"blue\") + \n      labs(title = paste0(\"Degree days - \", sitename),\n           y = paste0(\"Julian date \", DFTM_target, \" degree days reached\"),\n           x = \"Year\") + theme_bw(base_size = 15)\n    \n    print(degree_day_plot)\n  } else{\n  print(\"no plot\")\n  }\n  \n  return(list(mean_j_date, var_j_date)) \n  \n}\n\n\n# to either plot the cumulative degree days or just how many degree days each calendar day added\nplot_degree_days <- function(dataset, timeA=1991, threshold = 42, target = 440, var = \"cumulative\"){\n  degree_days <- dat %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>% \n    mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format=\"%j\"))) %>% drop_na(d_days) %>% \n    mutate(cumulative = cumsum(d_days)) \n  \n  date <- which(degree_days$cumulative >= target)[1]\n  \n  degree_day_plot <- degree_days %>% ggplot() + aes_string(x = \"j_date\", y = var)+ geom_point(color=\"blue\") +\n    labs(title = paste0(\"Daily Degree days - \", sitename, \" - \", timeA),\n         y = paste0(\"Degree days\"),\n         x = \"Julian Date\") + theme_bw(base_size = 15)\n  \n  if(var == \"cumulative\"){\n  degree_day_plot <- degree_day_plot + geom_segment(aes(x=date,xend=date,y=0,yend=target)) + \n    geom_segment(aes(x=0,xend=date,y=target,yend=target)) + \n    geom_point(x = date, y = target) + annotate(geom=\"text\", x=300, y=target, label=paste0(target, \" reached at day \", date),\n                                                   color=\"black\")\n  }\n  print(degree_day_plot)\n}\n\n",
    "created" : 1553210063489.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4279120654",
    "id" : "A2384C58",
    "lastKnownWriteTime" : 1553371010,
    "last_content_update" : 1553371010515,
    "path" : "~/Documents/StuffINeed/_Classes/ScienceComputing/Data/Functions.R",
    "project_path" : "Functions.R",
    "properties" : {
        "tempName" : "Untitled3"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}