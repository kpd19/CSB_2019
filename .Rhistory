library(zoo)
dat <- read_csv("leavenworth_daily.csv")
glimpse(dat)
dat$month <- format(dat$DATE, "%b")
dat$year <- as.numeric(format(dat$DATE,"%Y"))
good_years <- dat %>% group_by(year) %>% summarize(numdays = n()) %>% filter(numdays >320) %>% select(year)
dat <- dat %>% filter(year %in% good_years$year)
dat %>% group_by(year) %>% summarize(numdays = n()) %>% ggplot() + aes(x=year, y= numdays) + geom_line(color="dark green")
min_date <- min(dat$year)
max_date <- min(dat$year)
dat[dat$year == 1991,]$SNOW
cumulative_snow <- function(dataset, timeA = 1990){
snow_dat <- dataset %>% filter(year >timeA) %>% group_by(year) %>% summarize(cumulative = sum(SNOW, na.rm=TRUE))
SD_plot <- snow_dat %>% ggplot() + aes(x=year, y= cumulative) %>% geom_point(color="blue") +
labs(title = paste0("Extreme Temps of the Year - Leavenworth"),
y = "Cumulative Inches of Snow",
x = "Year") + theme_bw(base_size = 15)
print(SD_plot)
}
cumulative_snow(dataset = dat, timeA=min_date)
View(dat)
dat[dat$year == 1991,]$TMAX
dat %>% mutate(TMAX + TMIN)
dat %>% mutate(test = TMAX + TMIN)
dat %>% mutate(test = (TMAX + TMIN)/2)
dat %>% mutate(average = (TMAX + TMIN)/2)
threshold = 40
dat %>% mutate(average = (TMAX + TMIN)/2) %>% mutate(d_days = threshold - average)
dat %>% mutate(average = (TMAX + TMIN)/2) %>% mutate(d_days = average - threshold)
dat %>% mutate(average = (TMAX + TMIN)/2) %>% mutate(d_days = average - threshold) %>% mutate(test = ifelse(d_days <=0,0,d_days))
a <- dat %>% mutate(average = (TMAX + TMIN)/2) %>% mutate(d_days = average - threshold) %>% mutate(test = ifelse(d_days <=0,0,d_days))
View(a)
25.5-5.5
(25.5-5.5)*14
(25.5-5.5)*15
(25.5-5.5)*16
threshold <- 42
a <- dat %>% mutate(average = (TMAX + TMIN)/2) %>% mutate(d_days = average - threshold) %>% mutate(test = ifelse(d_days <=0,0,d_days))
dat %>% mutate(average = (TMAX + TMIN)/2) %>% mutate(d_days = average - threshold) %>% mutate(test = ifelse(d_days <=0,0,d_days)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
dat %>% mutate(average = (TMAX + TMIN)/2) %>% mutate(d_days = average - threshold) %>% mutate(test = ifelse(d_days <=0,0,d_days)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
dat %>% mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>% mutate(d_days = ifelse(diff <=0,0,d_days)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
dat %>% mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>% mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
a <- dat %>% mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>% mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
View(a)
dat %>% select(year = 1990) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>% mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
dat %>% filter(year = 1990) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>% mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
dat %>% filter(year == 1990) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>% mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
dat %>% select(year == 1990) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>% mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
dat %>% select(year == 1990)
dat %>% filter(year == 1990)
dat %>% filter(year == 1991)
dat %>% select(year == 1991)
dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>% mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% mutate(cumsum(d_days))
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% mutate(cumsum(d_days))
View(a)
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% mutate(cumsum(d_days, na.rm=TRUE))
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(d_days = ifelse(d_days=NA, 0,d_days) #mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% mutate(cumsum(d_days))
)
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(d_days = ifelse(d_days=NA, 0,d_days)) #mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% mutate(cumsum(d_days))
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(d_days = ifelse(d_days==NA, 0,d_days)) #mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% mutate(cumsum(d_days))
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(d_days = ifelse(d_days = NA, 0,d_days)) #mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% mutate(cumsum(d_days))
?drop_na
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) #mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% mutate(cumsum(d_days))
View(a)
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% mutate(cumsum(d_days))
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>% mutate(cumsum(d_days))
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumsum(d_days)) %>% ggplot() + aes(x = j_date, y = d_days) + geom_point(color="blue")
print(a)
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumsum(d_days)) #%>% ggplot() + aes(x = j_date, y = d_days) + geom_point(color="blue")
a <- dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) #%>% ggplot() + aes(x = j_date, y = d_days) + geom_point(color="blue")
dat %>% filter(year == 1991) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% ggplot() + aes(x = j_date, y = cumulative) + geom_point(color="blue")
dat %>% filter(year == 2015) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% ggplot() + aes(x = j_date, y = cumulative) + geom_point(color="blue")
dat %>% filter(year == 1950) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% ggplot() + aes(x = j_date, y = cumulative) + geom_point(color="blue")
dat %>% filter(year == 1950) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% which(cumulative > 400)
?select
dat %>% filter(year == 1950) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>400)
dat %>% filter(year == 1950) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>400) %>% top_n(1)
dat %>% filter(year == 1950) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>400) %>% top_n(1, desc=TRUE)
dat %>% filter(year == 1950) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>400) %>% top_n(1, desc)
dat %>% filter(year == 1950) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>400) %>% top_n(1, desc(j_date))
dat %>% filter(year == 1950) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>400) %>% top_n(1, desc(j_date)) %>% select(j_date)
find_degree_days <- function(dataset, timeA=1990, threshold = 42, target = 400){
dat %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>target) %>% top_n(1, desc(j_date)) %>% select(j_date)
}
find_degree_days <- function(dataset, timeA=1990, threshold = 42, target = 400){
first_date <- dat %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>target) %>% top_n(1, desc(j_date)) %>% select(j_date)
return(first_date)
}
find_degree_days()
find_degree_days <- function(dataset, timeA=1991, threshold = 42, target = 400){
first_date <- dat %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>target) %>% top_n(1, desc(j_date)) %>% select(j_date)
return(first_date)
}
find_degree_days()
find_degree_days <- function(dataset, timeA=1991, threshold = 42, target = 400){
first_date <- dat %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>target) %>% top_n(1, desc(j_date)) %>% select(j_date)
return(as.numeric(first_date))
}
find_degree_days()
find_degree_days(timeA= c(1950,1991))
find_degree_days(timeA=1991))
find_degree_days(timeA=1991)
find_degree_days(timeA=1950)
find_degree_days(timeA=1950:1995)
a <- seq(1950,1955)
find_degree_days(timeA=a)
find_degree_days <- function(dataset, timeA=1991, timeB= 1999, threshold = 42, target = 400){
first_date <- dat %>% filter(year == timeA:timeB) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>target) %>% top_n(1, desc(j_date)) %>% select(j_date)
return(as.numeric(first_date))
}
find_degree_days()
find_degree_days <- function(dataset, timeA=1991, threshold = 42, target = 400){
first_date <- dat %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% filter(cumulative>target) %>% top_n(1, desc(j_date)) %>% select(j_date)
return(as.numeric(first_date))
}
find_degree_days
find_degree_days()
print_degree_days <- function(dataset, timeA=1991){
degree_day_plot <- dataset %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% ggplot() + aes(x = j_date, y = cumulative) + geom_point(color="blue")
print(degree_day_plot)
}
print_degree_days(dataset=dat)
find_degree_days(dataset=dat, year = 1990)
find_degree_days(dataset=dat, timeA = 1990)
years <- seq(1950,1995)
years
for(i in 1:lenght(years)){
find_degree_days(years[i])
}
years <- seq(1950,1995)
for(i in 1:length(years)){
find_degree_days(years[i])
}
years <- seq(1950,1995)
for(i in 1:length(years)){
find_degree_days(dataset = dat, timeA = years[i])
}
years
years[5]
for(i in 1:length(years)){
a <- find_degree_days(dataset = dat, timeA = years[i])
print(a)
}
years %>% mutate(find_degree_days, dataset=dat, timeA=years)
years %>% mutate(find_degree_days, dataset=dat, timeA=1950)
years <- seq(1950,1995)
data.frame(years)
years <- seq(1950,1995)
years <- data.frame(years)
years %>% mutate(find_degree_days, dataset=dat, timeA=1950)
years %>% mutate(find_degree_days(dataset=dat, timeA=1950))
years %>% mutate(find_degree_days(dataset=dat, timeA=years))
years <- table(1950,1995)
years
years <- as.table(1950,1995)
years
years <- as.table(seq(1950,1995))
years
years <- as.array(seq(1950,1995))
years
seq(1950,1995)
years <- seq(1950,1995)
years
years <- seq(1950,1995)
values <- array(NA, dim=c(2,length(years)))
values
years <- seq(1950,1995)
values <- array(NA, dim=c(length(years),2))
values
values[,1]
values[,1] <- years
values
for(i in 1:length(years)){
values[i,1] <- find_degree_days(dataset = dat, timeA = years[i])
}
values
years <- seq(1950,1995)
values <- array(NA, dim=c(length(years),2))
values[,1] <- years
for(i in 1:length(years)){
values[i,2] <- find_degree_days(dataset = dat, timeA = years[i])
}
values
good_years
as.numeric(good_years)
as.array(good_years)
timeA = 1991
threshold = 42
target = 400
dat %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
timeA = 1990
dat %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j")))
values
values <- data.frame(values)
values
colnames(values) <- c(year, degree_days)
colnames(values) <- c("year", "degree_days")
values
years <- seq(1950,1995)
values <- array(NA, dim=c(length(years),2))
values[,1] <- years
for(i in 1:length(years)){
values[i,2] <- find_degree_days(dataset = dat, timeA = years[i])
}
values <- data.frame(values) %>% colnames(values) <- c("year", "degree_days")
values <- data.frame(values)
colnames(values) <- c("year", "degree_days")
values %>% ggplot() + aes(x = year, y = degree_days) + geom_point(color="blue")
colnames(values) <- c("year", "julian_days")
colnames(values) <- c("year", "julian_days")
values %>% ggplot() + aes(x = year, y = julian_days) + geom_point(color="blue")
good_years
values <- array(NA, dim=c(length(good_years),2))
values
View(good_years)
good_years <- dat %>% group_by(year) %>% summarize(numdays = n()) %>% filter(numdays >320) %>% select(year)
good_years
dat %>% group_by(year) %>% summarize(numdays = n()) %>% filter(numdays >320) %>% select(year)
dat %>% group_by(year) %>% summarize(numdays = n()) %>% filter(numdays >320) %>% select(year) %>% as.numeric(year)
dat %>% group_by(year) %>% summarize(numdays = n()) %>% filter(numdays >320) %>% as.numeric(select(year))
dat %>% group_by(year) %>% summarize(numdays = n()) %>% filter(numdays >320) %>% select(year)
glimpse(dat)
dat %>% group_by(year) %>% summarize(numdays = n()) %>% filter(numdays >320) %>% select(year) %>% ungroup
years <- seq(min(dat$year),max(dat$year))
years <- seq(min(dat$year),max(dat$year))
values <- array(NA, dim=c(length(years),2))
values[,1] <- years
for(i in 1:length(years)){
values[i,2] <- find_degree_days(dataset = dat, timeA = years[i])
}
values <- data.frame(values)
colnames(values) <- c("year", "julian_days")
values %>% ggplot() + aes(x = year, y = julian_days) + geom_point(color="blue")
values <- array(NA, dim=c(length(years),2))
values[,1] <- years
for(i in 1:length(years)){
values[i,2] <- find_degree_days(dataset = dat, timeA = years[i], threshold = 42, target = 400)
}
values <- data.frame(values)
colnames(values) <- c("year", "julian_days")
values %>% ggplot() + aes(x = year, y = julian_days) + geom_point(color="blue")
years <- seq(min(dat$year),max(dat$year))
values <- array(NA, dim=c(length(years),2))
values[,1] <- years
for(i in 1:length(years)){
values[i,2] <- find_degree_days(dataset = dat, timeA = years[i], threshold = 42, target = 440)
}
values <- data.frame(values)
colnames(values) <- c("year", "julian_days")
values %>% ggplot() + aes(x = year, y = julian_days) + geom_point(color="blue")
plot_degree_days <- function(dataset, timeA=1991){
degree_day_plot <- dataset %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% ggplot() + aes(x = j_date, y = cumulative) + geom_point(color="blue")
print(degree_day_plot)
}
plot_degree_days(dataset=dat)
plot_degree_days <- function(dataset, timeA=1991, var = "cumulative"){
degree_day_plot <- dataset %>% filter(year == timeA) %>%  mutate(average = (TMAX + TMIN)/2) %>% mutate(diff = average - threshold) %>%
mutate(d_days = ifelse(diff <=0,0,diff)) %>% mutate(j_date = as.numeric(format(DATE, format="%j"))) %>% drop_na(d_days) %>%
mutate(cumulative = cumsum(d_days)) %>% ggplot() + aes_string(x = "j_date", y = var)+ geom_point(color="blue")
print(degree_day_plot)
}
plot_degree_days(dataset=dat, timeA = 1991)
plot_degree_days(dataset=dat, timeA = 1991, var = "d_days")
values %>% ggplot() + aes(x = year, y = julian_days) + geom_point(color="blue")
Data = read.csv("/Users/katherinedixon/Documents/StuffINeed/YearOne/Spring2018/_TheoreticalEcology/Week8");
View(Data)
ErrBars<-function(x,y,SE){
NumPts = length(x);
for(Pts in 1:NumPts){
xvals = c(x[Pts],x[Pts]);
Upper = y[Pts]+SE[Pts];
Lower = y[Pts]-SE[Pts];
yvals = c(Upper,Lower);
lines(xvals,yvals);
}
}
logLHoodHtg<-function(par){
betaBar = par[1];
V  = par[2];
T = 7.0;
qoft = (1 + betaBar*V*Data$Density*T)^(-1/V); #1. Type in the model that describes the probability of surviving to time T
n0 = Data$Total; #n0 is the total number of insects in each treatment
N = Data$Uninfected; #N is the number uninfected
logLHood = dbinom(N, size=n0, prob=qoft, log=TRUE); #2. Type in the log-likelihood function for the pure death model
return(-sum(logLHood));  #We are looking for the negative sum of the log likelihoods across experimental units, because optim is a minimizer
}
HtgOptOut = optim(par=c(0.1,0.1),fn=logLHoodHtg);
BestBeta = HtgOptOut$par[1];
BestVee = HtgOptOut$par[2];
Tmts = unique(Data$Density); #Figure out what the treatments were
AvgTransmn = tapply(-log(Data$Uninfected/Data$Total),Data$Density,mean); #Use tapply to calculate the mean transmission rateat each treatment
SDTransmn = tapply(-log(Data$Uninfected/Data$Total),Data$Density,sd); #Use tapply to calculate the standard deviation of the transmission rate
par(mfrow=c(1,1));
par(mai=c(1,1,1,1));
plot(Tmts,AvgTransmn,ylim=c(0,2),xlim=c(0,max(Tmts)),xlab="Cadavers per branch",ylab="Transmission"); #Plot the model prediction against the data
NumReps = nrow(Data)/length(unique(Data$Density)); #Count how many replicates there were, for the standard-error calculation
ErrBars(x=Tmts,y=AvgTransmn,SDTransmn/sqrt(NumReps-1)); #Plot the error bars - standard error is sd/sqrt(n-1)
Cadavers = seq(from=0,to=4,by=0.1);
time = 7;
BestHtgModel = (1/BestVee)*log(1 + BestBeta*time*BestVee*Cadavers);
lines(Cadavers,BestHtgModel,col="RED",lwd=2.5);
maxitn = 2e5; maxchain = 5;
LH = c(); MaxPars = 2;
ThinStop = 1000;
ThinStor = maxitn/ThinStop;
StorPars = array(dim=c(maxchain,ThinStor,MaxPars));
PropMean = c(); PropSD = c(); Prior = c()
PropMean[1] = log(BestBeta);
PropMean[2] = log(BestVee);
PropSD[2] = 2.0;
PropSD[1] = 2.0;
Prior[1] = 1000.0;
Prior[2] = 1000.0;
ScaleSD = 1.2;
for(chain in 1:maxchain){
CurrentPars = c(); #the current values of the parameters
NewPars = c(); #the proposed values of the parameters
for(i in 1:MaxPars){ #starting values for the parameters
CurrentPars[i] = exp(rnorm(1,mean=PropMean[i],sd = ScaleSD*PropSD[i]));
}
#Calculating the posterior of the initial parameter set
OldLH = -1.0*logLHoodHtg(par=CurrentPars); #-1 because logLHoodHtg returns -log lhood, and we want log lhood
OldPost = OldLH;
for(i2 in 1:MaxPars){
OldPost = OldPost + log(dunif(x=(CurrentPars[i2]),max=Prior[i2]));
}
#parHtg = c(exp(BestBeta),exp(BestVee));
#logLHoodHtg(parHtg);
AcceptCount = 0;
itnStor = 1;
for(itn in 1:maxitn){
if(itn==1){
ScaleSD = 1.2;
}else{
ScaleSD = 1.0;
}
for(i in 1:MaxPars){
for(i2 in 1:MaxPars){
NewPars[i2] = CurrentPars[i2];
}
#3.  Propose a new parameter value, and calculate its posterior.
NewPars[i] = exp(rnorm(1,mean=PropMean[i],sd = ScaleSD*PropSD[i]));
NewLH = -1.0*logLHoodHtg(par=NewPars);
NewPost = NewLH;
for(i2 in 1:MaxPars){
NewPost = NewPost + log(dunif(x=(NewPars[i2]), max=Prior[i2]));
}
#Here is the adjustment for the proposal for the current parameter value
OldPropAdj = log(dnorm(x=log(CurrentPars[i]),mean=PropMean[i],sd=ScaleSD*PropSD[i]));
#4.  Now do the adjustment for the proposal, based on the new parameter value
NewPropAdj = log(dnorm(x=log(NewPars[i]),mean=PropMean[i],sd=ScaleSD*PropSD[i]));
if(itn>1){
#6. Write out the acceptance criterion, and decide whether to accept or not
#6a. First, calculate the acceptance criterion
Criterion = exp((NewPost-NewPropAdj)-(OldPost-OldPropAdj));
#6b. Second, draw a U(0,1) random variate.
temp = runif(1,min=0,max=1);
#6c. If statement for whether or not to accept
if((Criterion >1)||(Criterion>temp)){
AcceptCount = AcceptCount + 1;
OldPost = NewPost;
OldLH = NewLH;
#7. Acceptance means setting current parameters equal to proposed parameters
for(i2 in 1:MaxPars){
CurrentPars[i2] = NewPars[i2];
}#for i2
} #if Criterion
} #itn>1
} #for i in 1:MaxPars
#We only want to keep some of the iterations
if((itn %% ThinStop)==0){
cat("chain:",chain,"itn:",itn,"itnStor:",itnStor);
for(i2 in 1:MaxPars){
StorPars[chain,itnStor,i2] = CurrentPars[i2];
cat(" i2:",i2,"StorPars:",StorPars[chain,itnStor,i2]);
}
itnStor = itnStor + 1;
cat("\n"); #line = readline();
} #Thin
} #itn
} #chain
require(coda);
AllPars = c();
itnStor = itnStor - 1;
HalfWay = round(0.5*itnStor);
x1 = mcmc(StorPars[1,HalfWay:itnStor,]);
x2 = mcmc(StorPars[2,HalfWay:itnStor,]);
x3 = mcmc(StorPars[3,HalfWay:itnStor,]);
x4 = mcmc(StorPars[4,HalfWay:itnStor,]);
x5 = mcmc(StorPars[5,HalfWay:itnStor,]);
xAll = mcmc.list(x1,x2,x3,x4,x5);
par(ask="TRUE");
par(mai=c(0.5,0.5,0.5,0.5));
plot(xAll)
print(gelmanOut);
par(mfrow=c(5,2));
par(ask="TRUE");
par(mai=c(0.225,0.25,0.225,0.25));
title(main="")
acf(x1[,1],xlab="",ylab=""); abline(h=-0.1,col="RED"); abline(h=0.1,col="RED");
acf(x2[,1],xlab="",ylab=""); abline(h=-0.1,col="RED"); abline(h=0.1,col="RED");
acf(x2[,2],xlab="",ylab=""); abline(h=-0.1,col="RED"); abline(h=0.1,col="RED");
acf(x3[,1],xlab="",ylab=""); abline(h=-0.1,col="RED"); abline(h=0.1,col="RED");
acf(x3[,2],xlab="",ylab=""); abline(h=-0.1,col="RED"); abline(h=0.1,col="RED");
acf(x4[,1],xlab="",ylab=""); abline(h=-0.1,col="RED"); abline(h=0.1,col="RED");
acf(x4[,2],xlab="",ylab=""); abline(h=-0.1,col="RED"); abline(h=0.1,col="RED");
acf(x5[,1],xlab="",ylab=""); abline(h=-0.1,col="RED"); abline(h=0.1,col="RED");
acf(x5[,2],xlab="",ylab=""); abline(h=-0.1,col="RED"); abline(h=0.1,col="RED");
AllData = c();
for(chain in 1:maxchain){
AllData = rbind(AllData,StorPars[chain,1:ThinStor,]);
}
Burnout<-function(nu,mu,V,S0,I0,i){ #This function is a straight line
return (1 - i - (1 + nu*V/mu*(i*S0+I0))^(-V));
}
S0 = 0.1; I0 = 0.01;
UpperPctl = round(0.25*ThinStor);
LowerPctl = round(0.75*ThinStor);
S0Range = seq(from=0.0,to=10.0,by=0.1); #the range of values over which we will calculate the root
S0Dim = length(S0Range);
ParamDim = nrow(AllData);
FractInf = c();
FIPlotUpper = c(); FIPlotLower = c(); FIMedian = c();
i = 1;
for(S0 in S0Range){
for(j in 1:ThinStor){
z = uniroot(f=Burnout,interval=c(0.0,1.0),nu=AllData[j,1],mu=0.41,V=AllData[j,2],S0=S0,I0=I0);
FractInf[j] = z$root;
#cat("S0:",S0,"j:",j,"FractInf:",FractInf[j],"\n");
if(1){
Ordering = order(FractInf,decreasing=TRUE); #figuring out the order of the parameters
OrderedFractInf = cbind(FractInf)[Ordering,] #Carrying out the ordering...
FIPlotUpper[i] = OrderedFractInf[UpperPctl];
FIPlotLower[i] = OrderedFractInf[LowerPctl];
FIMedian[i] = median(FractInf);
}
}
#line = readline();
i = i + 1;
}
par(ask="FALSE");
k1 = 0.0;
k2 = 100.0;
par(mfrow=c(1,1));
MedianCost = k1 + k2*(1-FIMedian)*S0Range;
LowerCost = k1 + k2*(1-FIPlotUpper)*S0Range;
UpperCost = k1 + k2*(1-FIPlotLower)*S0Range;
par(mfrow=c(1,1));
Upperylim = max(UpperCost);
Lowerylim = min(LowerCost);
par(mai=c(1,1,1,1));
plot(S0Range,MedianCost,type="l",ylim=c(Lowerylim,Upperylim),ylab="Cost",xlab="Insect Density", las=1);  #linear
lines(S0Range,UpperCost,type="l",lwd=2.5);
lines(S0Range,LowerCost,type="l",lwd=2.5);
abline(h=60, col="red", lwd=2)
abline(h=40, col="blue", lwd=2)
View(Data)
